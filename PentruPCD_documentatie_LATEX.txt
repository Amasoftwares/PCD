\documentclass{article}
\renewcommand{\contentsname}{Cuprins}
\usepackage[utf8]{inputenc}
\usepackage[a4paper, total={6in, 8in}]{geometry}
\usepackage{listings}
\usepackage{color}
\usepackage{graphicx}
\graphicspath{ {./images/} }

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{frame=tb,
  language=Java,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\small\ttfamily},
  numbers=none,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=3
}

\title{Proiect programare concurenta si distribuita}
\author{Iulian Cimpan, Teodor Branescu, Sebastian Carabasiu, Bogdan Petri, Adrian Bordeianu}
\date{2020}

\usepackage{natbib}
\usepackage{graphicx}

\begin{document}

\maketitle
\clearpage
\tableofcontents
\clearpage


\section{Introducere}
   Proiectul pe care l-am implementat are rolul de a transfera imagini de la un calculator la altul asigurand prelucrarea acestora prin intermediul unor scripturi Python folosind mai multe biblioteci(ex: OpenCV). \\

\section{Descriere}
In dezvoltarea aplicatiei am avut ca obiective principale:
\begin{enumerate}
    \item Crearea unui server in C
    \item Crearea unui client in C
    \item Introducerea de scripturi Python embedded in C pentru prelucrarea imaginilor
\end{enumerate}
\section{Tehnologii folosite}
\subsection{C server}
Serverul are rolul de a primii fisierele de la client. In implementarea lui am folosit socket-uri si doua modalitati de transmitere a informatiilor: 
\begin{enumerate}
\item UDP - User Datagram Protocol
\item TCP - Transmission Control Protocol
\end{enumerate}
Pentru a rula serverul trebuie sa specificam potrul pe care acesta va functiona.
Pentru server folosim biblioteci pentru:
\begin{enumerate}
     \item time 
    \item sockets
    \item types
    \item etc.
\end{enumerate}
Exemplu de functie folosita pentru crearea unui socket:
\begin{lstlisting}
/* Functia care permite crearea unui socket si atasarea acestuia la sistem
 * Returneaza un descriptor de fisier in tabelul descriptorului de proces
 * bind permite definirea sa cu sistemul
 */
int create_server_socket (int port){
    int l;
	int sfd;
    int yes=1;
    
	sfd = socket(PF_INET,SOCK_STREAM,0);
	if (sfd == -1){
        perror("eroare socket.");
        return EXIT_SUCCESS;
	}
    	/*SOL_SOCKET : manevreaza optiunile de la nivelul API-ului socket-ului
     *SO_REUSEADDR : pentru repornirea unui server in cazul unei opriri bruste
     * pentru a nu avea erori la crearea socket-ului
     * cazul in care sunt mai multe servere pe ac port
     */
    if(setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR,&yes,sizeof(int)) == -1 ) {
        perror("Eroare setsocket.");
        exit(5);
    }
    
    //pregatirea adresei socket-ului de destinatie
	l=sizeof(struct sockaddr_in);
	bzero(&sock_serv,l);
	
	sock_serv.sin_family=AF_INET;
	sock_serv.sin_port=htons(port);
	sock_serv.sin_addr.s_addr=htonl(INADDR_ANY);
    
	//alocarea unei identitati socket-ului
	if(bind(sfd,(struct sockaddr*)&sock_serv,l)==-1){
		perror("Eroare bind");
		return EXIT_FAILURE;
	}
    
    
    return sfd;
}
\end{lstlisting}
\subsection{C client}
Clientul are rolul de a transmite imagini serverului, totodata acesta ocupandu-se si de prelucrarea acestora prin scripturi embedded Python.
Pentru a rula clientul trebuie sa specificam: adresa ip de destinatie, portul serverului si fisierul de transferat.
De asemenea si pentru client folosim doua modalitati de transmitere a informatiilor:
\begin{enumerate}
    \item UDP - User Datagram Protocol
    \item TCP - Transmision Control Protocol 
\end{enumerate}
Biblioteci folosite:
\begin{enumerate}
    \item time 
    \item sockets
    \item types
    \item Python.h
    \item etc.
\end{enumerate}
\clearpage
Exemplun de functie folosita pentru crearea unui socket:
\begin{lstlisting}
int create_client_socket (int port, char* ipaddr){
    int l;
	int sfd;
    
	sfd = socket(PF_INET,SOCK_STREAM,0);
	if (sfd == -1){
        perror("socket esuat");
        return EXIT_FAILURE;
	}
    
    //pregătirea adresei socket-ului  de destinație
	l=sizeof(struct sockaddr_in);
	bzero(&sock_serv,l);
	
	sock_serv.sin_family=AF_INET;
	sock_serv.sin_port=htons(port);
    if (inet_pton(AF_INET,ipaddr,&sock_serv.sin_addr)==0){
		printf("Adresa IP invalida:\n");
		return EXIT_FAILURE;
	}
    
    return sfd;
}
\end{lstlisting}

\subsection{Scripturi Python}
\subsection{Rotire imagine }
\begin{lstlisting}
def rotate(angle = 30):
	angle = float(angle)
	image = Image.open(name)
	image.save(name)
	image = image.rotate(angle)
	image.save("{}".format(name))
\end{lstlisting}
\clearpage
\subsection{Highpass}
\begin{lstlisting}
def highpass(sigma = 29):
	sigma = int(sigma)
	if(sigma%2):
		image = cv2.imread(name)
		blur = cv2.GaussianBlur(image, (sigma,sigma),0)
		image = image - blur
		image = image + 127
		cv2.imwrite(name, image)
	else:
		print("Sigma trebuie sa fie numar impar!")
		sys.exit()
\end{lstlisting}

\subsection{Lowpass}
\begin{lstlisting}
def lowpass(sigma = 29):
	sigma = int(sigma)
	if(sigma%2):
		image = cv2.imread(name)
		image = cv2.GaussianBlur(image,(sigma,sigma),0)
		cv2.imwrite(name,image)
	else:
		print("Sigma trebuie sa fie numar impar!")
		sys.exit()
\end{lstlisting}

\subsection{Spectrul de culoare HSV}
\begin{lstlisting}
def hsv():
	image = cv2.imread(name)
	image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
	cv2.imwrite(name,image)
\end{lstlisting}

\subsection{Negativare imagine}
\begin{lstlisting}
def neg():
	image = cv2.imread(name)
	image = 255-image
	cv2.imwrite(name,image)
\end{lstlisting}

\clearpage

\subsection{Transformarea imaginii in binar}
\begin{lstlisting}
def bnw():
	image = cv2.imread(name)
	image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
	(thresh, image) = cv2.threshold(image, 127,255,cv2.THRESH_BINARY)
	cv2.imwrite(name,image)
\end{lstlisting}

\section{Directii viitoare de dezvoltare}
Idei viitoare:
\begin{enumerate}
    \item Adaugarea unui interfete grafice.
    \item Adaugarea posibilitatii de prelucrare a unui flux video.
    \item Usurarea experientei de utilizare.
\end{enumerate}
\end{document}


